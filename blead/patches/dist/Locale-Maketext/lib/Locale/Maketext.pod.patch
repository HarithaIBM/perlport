***************
*** 308,314 ****
  Lookup Failure".
  
! =item $lh->blacklist(@list)
  
! =item $lh->whitelist(@list)
  
  These methods are discussed in the section "Bracket Notation
--- 308,314 ----
  Lookup Failure".
  
! =item $lh->denylist(@list) <or> $lh->blacklist(@list)
  
! =item $lh->allowlist(@list) <or> $lh->whitelist(@list)
  
  These methods are discussed in the section "Bracket Notation
***************
*** 876,890 ****
  used to process strings provided by untrusted users.
  
! Locale::Maketext does support blacklist and whitelist functionality
  to limit which methods may be called as bracket notation methods.
  
! By default, Locale::Maketext blacklists all methods in the
  Locale::Maketext namespace that begin with the '_' character,
  and all methods which include Perl's namespace separator characters.
  
! The default blacklist for Locale::Maketext also prevents use of the
  following methods in bracket notation:
  
!   blacklist
    encoding
    fail_with
--- 876,890 ----
  used to process strings provided by untrusted users.
  
! Locale::Maketext does support denylist and allowlist functionality
  to limit which methods may be called as bracket notation methods.
  
! By default, Locale::Maketext denies all methods in the
  Locale::Maketext namespace that begin with the '_' character,
  and all methods which include Perl's namespace separator characters.
  
! The default denylist for Locale::Maketext also prevents use of the
  following methods in bracket notation:
  
!   denylist
    encoding
    fail_with
***************
*** 897,927 ****
    maketext
    new
    whitelist
  
! This list can be extended by either blacklisting additional "known bad"
! methods, or whitelisting only "known good" methods.
  
  To prevent specific methods from being called in bracket notation, use
! the blacklist() method:
  
    my $lh = MyProgram::L10N->get_handle();
!   $lh->blacklist(qw{my_internal_method my_other_method});
    $lh->maketext('[my_internal_method]'); # dies
  
  To limit the allowed bracked notation methods to a specific list, use the
! whitelist() method:
  
    my $lh = MyProgram::L10N->get_handle();
!   $lh->whitelist('numerate', 'numf');
    $lh->maketext('[_1] [numerate, _1,shoe,shoes]', 12); # works
    $lh->maketext('[my_internal_method]'); # dies
  
! The blacklist() and whitelist() methods extend their internal lists
! whenever they are called. To reset the blacklist or whitelist, create
  a new maketext object.
  
    my $lh = MyProgram::L10N->get_handle();
!   $lh->blacklist('numerate');
!   $lh->blacklist('numf');
    $lh->maketext('[_1] [numerate,_1,shoe,shoes]', 12); # dies
  
--- 897,929 ----
    maketext
    new
+   allowlist
    whitelist
+   blacklist
  
! This list can be extended by either deny-listing additional "known bad"
! methods, or allow-listing only "known good" methods.
  
  To prevent specific methods from being called in bracket notation, use
! the denylist() method:
  
    my $lh = MyProgram::L10N->get_handle();
!   $lh->denylist(qw{my_internal_method my_other_method});
    $lh->maketext('[my_internal_method]'); # dies
  
  To limit the allowed bracked notation methods to a specific list, use the
! allowlist() method:
  
    my $lh = MyProgram::L10N->get_handle();
!   $lh->allowlist('numerate', 'numf');
    $lh->maketext('[_1] [numerate, _1,shoe,shoes]', 12); # works
    $lh->maketext('[my_internal_method]'); # dies
  
! The denylist() and allowlist() methods extend their internal lists
! whenever they are called. To reset the denylist or allowlist, create
  a new maketext object.
  
    my $lh = MyProgram::L10N->get_handle();
!   $lh->denylist('numerate');
!   $lh->denylist('numf');
    $lh->maketext('[_1] [numerate,_1,shoe,shoes]', 12); # dies
  
***************
*** 928,938 ****
  For lexicons that use an internal cache, translations which have already
  been cached in their compiled form are not affected by subsequent changes
! to the whitelist or blacklist settings. Lexicons that use an external
! cache will have their cache cleared whenever the whitelist of blacklist
! setings change.  The difference between the two types of caching is explained
  in the "Readonly Lexicons" section.
  
! Methods disallowed by the blacklist cannot be permitted by the
! whitelist.
  
  =head1 AUTO LEXICONS
--- 930,950 ----
  For lexicons that use an internal cache, translations which have already
  been cached in their compiled form are not affected by subsequent changes
! to the allowlist or denylist settings. Lexicons that use an external
! cache will have their cache cleared whenever the allowlist or denylist
! settings change.  The difference between the two types of caching is explained
  in the "Readonly Lexicons" section.
  
! Methods disallowed by the denylist cannot be permitted by the
! allowlist.
! 
! NOTE: denylist() is the preferred method name to use instead of the 
! historical and non-inclusive method blacklist(). blacklist() may be 
! removed in a future release of this package and so it's use should be
! removed from usage.
! 
! NOTE: allowlist() is the preferred method name to use instead of the 
! historical and non-inclusive method whitelist(). whitelist() may be 
! removed in a future release of this package and so it's use should be
! removed from usage.
  
  =head1 AUTO LEXICONS
