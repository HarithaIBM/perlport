***************
*** 15,28 ****
  #  as well as the authors of the aix.sh file
  #
- 
  # It is too late in Configure by the time this is called to change the
  # compiler.  But xlc or synonyms are the only thing that likely currently will
  # work.
  #
  # But it isn't too late to change 'ld', and the z/OS 390 ld command doesn't
  # understand some command line options like -W and -q that the loader needs to
! # know about.  xlc also acts like a loader and does understand them.
  case "$ld" in
! '') ld='xlc' ;;
  esac
  
--- 15,34 ----
  #  as well as the authors of the aix.sh file
  #
  # It is too late in Configure by the time this is called to change the
  # compiler.  But xlc or synonyms are the only thing that likely currently will
  # work.
+ # Regarding the previous 2 sentences... 
+ # msf:(It appears that we _can_ specify the compiler and we need to since 'cc' 
+ # does not understand the -l option when trying to compile and link, but xlc does.
  #
  # But it isn't too late to change 'ld', and the z/OS 390 ld command doesn't
  # understand some command line options like -W and -q that the loader needs to
! # know about.  c99 also acts like a loader and does understand them.
! set -x
! case "$cc" in
! '') cc='c99' ;;
! esac
  case "$ld" in
! '') ld='c99' ;;
  esac
  
***************
*** 31,58 ****
  # IBM added the -q series of options to the compiler, which khw thinks should
  # be sufficient.  -Wl are for the loader, and may be required.
! os390_Wc="-Wc"
! os390_Wl="-Wl"
  
- # -DEBCDIC should come from Configure and need not be mentioned here.
  # Prepend your favorites with Configure -Dccflags=your_favorites
  
  # This overrides the name the compiler was called with.  'ext' is required for
  # "unicode literals" to be enabled
! def_os390_cflags='-qlanglvl=extc99';
  
! def_os390_cflags="$def_os390_cflags -qlongname";    # khw thinks this is obsolete
! def_os390_cflags="$def_os390_cflags -qfloat=ieee";  # khw thinks this is obsolete
  
  # xplink = eXtended Performance linking: "Uses a z/OS linkage specifically
  # designed to increase performance."
! def_os390_cflags="$def_os390_cflags -qxplink";
! def_os390_cccdlflags="-qxplink"
! def_os390_ldflags="-qxplink"
! os390_Wc="$os390_Wc,XPLINK"
! os390_Wl="$os390_Wl,XPLINK"
  
! # Without this, you get "IEW2689W 4C40 DEFINITION SIDE FILE IS NOT DEFINED."
! os390_Wl="$os390_Wl,dll"
  
  # Exports all externally defined functions and variables in the compilation
  # unit so that a DLL application can use them."
--- 37,79 ----
  # IBM added the -q series of options to the compiler, which khw thinks should
  # be sufficient.  -Wl are for the loader, and may be required.
! # msf I think this is mostly true, although -Wc,lp64 and -Wl,lp64 seem to be the reliable way to specify 64-bit amode
  
  # Prepend your favorites with Configure -Dccflags=your_favorites
+ # msf: longname is not required with xplink or 64-bit
  
  # This overrides the name the compiler was called with.  'ext' is required for
  # "unicode literals" to be enabled
! def_os390_cflags='-qlanglvl=extc1x';
  
! # Turn on POSIX compatibility modes
! #  https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.bpxbd00/ftms.htm
! def_os390_defs="$def_os390_defs -D_ALL_SOURCE";
  
  # xplink = eXtended Performance linking: "Uses a z/OS linkage specifically
  # designed to increase performance."
! # msf: XPLink is not required to be specified for 64-bit
  
! case "$USE_64_BIT_ALL" in
! '') 
!   def_os390_cflags="$def_os390_cflags -qxplink"
!   def_os390_cccdlflags="-qxplink"
!   def_os390_ldflags="-qxplink"
! # defines a BSD-like socket interface for the function prototypes and structures involved (not required with 64-bit)
!   def_os390_defs="$def_os390_defs -D_OE_SOCKETS";
!   ;;
! *)  
!   def_os390_cflags="$def_os390_cflags -Wc,lp64"
!   def_os390_cccdlflags="$def_os390_cflags -Wc,lp64"
!   def_os390_ldflags="-Wl,lp64"
! esac
  
+ case "$os390codepage" in
+ ascii) 
+   def_os390_cflags="$def_os390_cflags -qascii"
+   ;;
+ ebcdic)
+   ;;
+ esac
+ 
  # Exports all externally defined functions and variables in the compilation
  # unit so that a DLL application can use them."
***************
*** 59,63 ****
  def_os390_cflags="$def_os390_cflags -qexportall";
  def_os390_cccdlflags="$def_os390_cccdlflags -qexportall"
- os390_Wc="$os390_Wc,EXPORTALL"
  
  # 3296= #include file not found;
--- 80,83 ----
***************
*** 66,88 ****
  #       actually means it didn't do what we expected. e.g.,
  #          INFORMATIONAL CCN4108 ./proto.h:4534 The use of keyword '__attribute__' is non-portable.
! def_os390_cflags="$def_os390_cflags -qhaltonmsg=3296:4108"
  
- # Combinte the -W flags with the rest
- def_os390_cflags="$def_os390_cflags $os390_Wc";
- def_os390_cflags="$def_os390_cflags $os390_Wl";
- 
- def_os390_cccdlflags="$def_os390_cccdlflags $os390_Wc";
- def_os390_cccdlflags="$def_os390_cccdlflags $os390_Wl";
- 
  def_os390_defs='-DMAXSIG=39';               # maximum signal number; not furnished by IBM
  def_os390_defs="$def_os390_defs -DOEMVS";   # is used in place of #ifdef __MVS__
  
- # Turn on POSIX compatibility modes
- #  https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.bpxbd00/ftms.htm
- def_os390_defs="$def_os390_defs -D_ALL_SOURCE";
- 
- # defines a BSD-like socket interface for the function prototypes and structures involved
- def_os390_defs="$def_os390_defs -D_OE_SOCKETS";
- 
  # ensure that the OS/390 yacc generated parser is reentrant.
  def_os390_defs="$def_os390_defs -DYYDYNAMIC";
--- 86,94 ----
  #       actually means it didn't do what we expected. e.g.,
  #          INFORMATIONAL CCN4108 ./proto.h:4534 The use of keyword '__attribute__' is non-portable.
! def_os390_cflags="$def_os390_cflags -qhaltonmsg=3296:4108 -qsuppress=CCN3159 -qfloat=ieee"
  
  def_os390_defs='-DMAXSIG=39';               # maximum signal number; not furnished by IBM
  def_os390_defs="$def_os390_defs -DOEMVS";   # is used in place of #ifdef __MVS__
  
  # ensure that the OS/390 yacc generated parser is reentrant.
  def_os390_defs="$def_os390_defs -DYYDYNAMIC";
***************
*** 92,95 ****
--- 98,104 ----
  def_os390_defs="$def_os390_defs -DNO_LOCALE_MESSAGES"
  
+ # Set up feature test macros     
+ def_os390_defs="$def_os390_defs -D_OPEN_THREADS=3 -D_UNIX03_SOURCE=1 -DNSIG=39 -D_AE_BIMODAL=1 -D_XOPEN_SOURCE_EXTENDED -D_ALL_SOURCE -D_ENHANCED_ASCII_EXT=0xFFFFFFFF -D_OPEN_SYS_FILE_EXT=1 -D_OPEN_SYS_SOCK_IPV6 -D_XOPEN_SOURCE=600 -D_XOPEN_SOURCE_EXTENDED"
+ 
  # Combine -D with cflags
  case "$ccflags" in
***************
*** 133,143 ****
  esac
  
! # Setting ldflags='-Wl,EDIT=NO' will get rid of the symbol
! # information at the end of the executable (=> smaller binaries).
! # Override this option with -Dldflags='whatever else you wanted'.
! case "$optimize" in
! *-g*) ;;
! *)  ldflags="$ldflags -Wl,EDIT=NO"
! esac
  
  # In order to build with dynamic be sure to specify:
--- 142,148 ----
  esac
  
! # msf symbol information is now in NOLOAD section and so, while on disk, 
! # does not require time to load but is useful in problem determination if required,
! # so it is no longer necessary to link with -Wl,EDIT=NO
  
  # In order to build with dynamic be sure to specify:
***************
*** 161,164 ****
--- 166,170 ----
     esac
     # For performance use 'so' at or beyond v2.8, 'dll' for 2.7 and prior versions
+    # msf v2.8 is ancient - we should be able to eliminate this check and just use .so
     case "`uname -v`x`uname -r`" in
     02x0[89].*|02x1[0-9].*|[0-9][3-9]x*)
***************
*** 265,268 ****
--- 271,275 ----
  # This trick ought to work even if your yacc is byacc.
  #
+ # msf - need to check but I think /etc/yyparse.c is always around now
  if test "X$byacc" = "Xbyacc" ; then
     if test -e /etc/yyparse.c ; then
