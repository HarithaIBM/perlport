diff --git a/lib/File/Copy.pm b/lib/File/Copy.pm
index ce659a0..ebde82d 100644
--- a/lib/File/Copy.pm
+++ b/lib/File/Copy.pm
@@ -180,6 +180,11 @@ sub copy {
 	}
     }
 
+    # Copy file tags on os390
+    if ($^O eq 'os390') {
+      ZOS::Filespec::copytags(fileno($from_h), fileno($to_h));
+    }
+
     close($to_h) || goto fail_open2 if $closeto;
     close($from_h) || goto fail_open1 if $closefrom;
 
diff --git a/installperl b/installperl
index 3c8af53..e2006c5 100755
--- a/installperl
+++ b/installperl
@@ -284,7 +284,6 @@ else {
     strip("$installbin/$perl_verbase$ver$exe_ext");
     fix_dep_names("$installbin/$perl_verbase$ver$exe_ext");
     chmod(0755, "$installbin/$perl_verbase$ver$exe_ext");
-    `chtag -r "$installbin/$perl_verbase$ver$exe_ext"` if ($^O eq 'os390');
 }
 
 # Install library files.
@@ -355,7 +354,6 @@ foreach my $file (@corefiles) {
 	} else {
 	    chmod($NON_SO_MODE, "$installarchlib/CORE/$file");
 	}
-        `chtag -r "$installarchlib/CORE/$file"` if ($^O eq 'os390');
     }
 }
 
@@ -424,7 +422,6 @@ if ($Config{installusrbinperl} && $Config{installusrbinperl} eq 'define' &&
 	  eval { CORE::link $instperl, $usrbinperl } )	||
 	eval { symlink $expinstperl, $usrbinperl }	||
 	copy($instperl, $usrbinperl);
-        `chtag -r "$usrbinperl"` if ($^O eq 'os390');
 
 	$mainperl_is_instperl = 1;
     }
@@ -719,7 +716,6 @@ sub copy_if_diff {
 	    my ($atime, $mtime) = (stat $from)[8,9];
 	    utime $atime, $mtime, $to;
 	}
-        `chtag -r "$to"` if ($^O eq "os390");
 	1;
     }
 }
diff --git a/os390/os390.c b/os390/os390.c
new file mode 100644
index 0000000..78fcc7f
--- /dev/null
+++ b/os390/os390.c
@@ -0,0 +1,138 @@
+#include "os390/os390.h"
+#include <string.h>
+#include <sys/stat.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/ps.h>
+#include <unistd.h>
+#include <stdarg.h>
+#include <varargs.h>
+#include <limits.h>
+#include <_Nascii.h>
+#include <fcntl.h>
+#include <libgen.h>
+
+int __setccsid(int fd, int ccsid) 
+{
+  attrib_t attr;
+  int rc;
+
+  memset(&attr, 0, sizeof(attr));
+  attr.att_filetagchg = 1;
+  attr.att_filetag.ft_ccsid = ccsid;
+  attr.att_filetag.ft_txtflag = 1;
+
+  rc = __fchattr(fd, &attr, sizeof(attr));
+  return rc;
+}
+
+void __updateccsid(int fd, const char* path, int oflag, int perm) 
+{ 
+  int rc;
+  if (oflag & O_CREAT) {
+    rc = __setccsid(fd, 819);
+  }
+}
+
+int __pipe(int [2]) asm("pipe");
+int __open(const char *filename, int opts, ...) asm("@@A00144");
+
+int __open_ascii(const char *filename, int opts, ...) {
+  va_list ap;
+  va_start(ap, opts);
+  int perms = va_arg(ap, int);
+  struct stat sb;
+  int is_new_file = stat(filename, &sb) != 0;
+  int fd = __open(filename, opts, perms);
+  // Tag new files as 819
+  if (fd >= 0 && is_new_file)
+    __chgfdccsid(fd, 819);
+  va_end(ap);
+  return fd;
+}
+
+int __pipe_ascii(int fd[2]) {
+  int ret = __pipe(fd);
+  if (ret < 0)
+    return ret;
+
+  // Default ccsid for new pipes should be 819
+  __chgfdccsid(fd[0], 819);
+  __chgfdccsid(fd[1], 819);
+  return ret;
+}
+
+int __getfdccsid(int fd) {
+  struct stat st;
+  int rc;
+  rc = fstat(fd, &st);
+  if (rc != 0)
+    return -1;
+  unsigned short ccsid = st.st_tag.ft_ccsid;
+  if (st.st_tag.ft_txtflag) {
+    return 65536 + ccsid;
+  }
+  return ccsid;
+}
+
+int __chgfdccsid(int fd, unsigned short ccsid) 
+{
+  attrib_t attr;
+  memset(&attr, 0, sizeof(attr));
+  attr.att_filetagchg = 1;
+  attr.att_filetag.ft_ccsid = ccsid;
+  if (ccsid != FT_BINARY) {
+    attr.att_filetag.ft_txtflag = 1;
+  }
+  return __fchattr(fd, &attr, sizeof(attr));
+}
+
+int __setfdccsid(int fd, int t_ccsid) {
+  attrib_t attr;
+  memset(&attr, 0, sizeof(attr));
+  attr.att_filetagchg = 1;
+  attr.att_filetag.ft_txtflag = (t_ccsid >> 16);
+  attr.att_filetag.ft_ccsid = (t_ccsid & 0x0ffff);
+  return __fchattr(fd, &attr, sizeof(attr));
+}
+
+
+#include "EXTERN.h"
+#include "perl.h"
+#include "XSUB.h"
+
+void
+zos_copytags(pTHX_ CV *cv)
+{
+  dXSARGS;
+  STRLEN n_a;
+  int ret = 0;
+
+  if (items != 2)
+    Perl_croak(aTHX_ "Usage: ZOS::Filespec::copytags(f1, f2])");
+
+  int from_fd = (int)SvIV(ST(0));
+  int to_fd = (int)SvIV(ST(1));
+
+  struct stat src_statsbuf;
+  if (fstat(from_fd, &src_statsbuf)) {
+    ret = -1;
+  }
+  if (ret != -1) {
+    ret = __setfdccsid(to_fd,  (src_statsbuf.st_tag.ft_txtflag << 16) | src_statsbuf.st_tag.ft_ccsid);
+  }
+
+  XSRETURN(ret);
+}
+
+
+void
+init_os_extras(void)
+{
+  dTHX;
+  char* file = __FILE__;
+
+  newXSproto("ZOS::Filespec::copytags",zos_copytags,file,"$;$");
+
+  return;
+}
diff --git a/os390/os390.h b/os390/os390.h
new file mode 100644
index 0000000..e55d64f
--- /dev/null
+++ b/os390/os390.h
@@ -0,0 +1,35 @@
+#ifndef H_OS390
+#define H_OS390 1
+
+#if (__CHARSET_LIB == 1)
+#undef open
+#define open __open_replaced
+#include <fcntl.h>
+#undef open
+
+#undef pipe 
+#define pipe __pipe_replaced
+#include <unistd.h>
+#undef pipe
+
+int __open_ascii(const char *filename, int opts, ...);
+int __pipe_ascii(int [2]);
+
+int open(const char* path, int oflag, ...) asm("__open_ascii");
+int pipe(int [2]) asm("__pipe_ascii");
+#endif
+
+#include <string.h>
+#include <sys/ps.h>
+#include <unistd.h>
+#include <limits.h>
+#include <_Nascii.h>
+#include <fcntl.h>
+#include <libgen.h>
+
+int __getfdccsid(int fd);
+int __setccsid(int fd, int ccsid);
+int __chgfdccsid(int fd, unsigned short ccsid);
+void __updateccsid(int fd, const char* path, int oflag, int perm);
+
+#endif
diff --git a/perl.c b/perl.c
index 057cd0e..75453d2 100644
--- a/perl.c
+++ b/perl.c
@@ -2428,7 +2428,7 @@ S_parse_body(pTHX_ char **env, XSINIT_t xsinit)
     if (xsinit)
         (*xsinit)(aTHX);	/* in case linked C routines want magical variables */
 #ifndef PERL_MICRO
-#if defined(VMS) || defined(WIN32) || defined(__CYGWIN__)
+#if defined(VMS) || defined(WIN32) || defined(__CYGWIN__) || defined(__MVS__)
     init_os_extras();
 #endif
 #endif
diff --git a/os390/os390_init.c b/os390/os390_init.c
new file mode 100644
index 0000000..16c6e68
--- /dev/null
+++ b/os390/os390_init.c
@@ -0,0 +1,154 @@
+#include "os390/os390.h"
+#include <string.h>
+#include <sys/stat.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/ps.h>
+#include <unistd.h>
+#include <stdarg.h>
+#include <varargs.h>
+#include <limits.h>
+#include <_Nascii.h>
+#include <fcntl.h>
+#include <libgen.h>
+
+void init_stdio_streams() {
+  // If stdout is not a TTY and is untagged, tag it as 1047
+  int ret = 0;
+  if (0 == __getfdccsid(fileno(stdout))) {
+    struct file_tag tag;
+    tag.ft_ccsid = 1047;
+    tag.ft_txtflag = 1;
+    ret += fcntl(fileno(stdout), F_SETTAG, &tag) != 0;
+
+    struct f_cnvrt req = {SETCVTON, 0, 1047};
+    ret =+ fcntl(fileno(stdout), F_CONTROL_CVT, &req) != 0;
+  }
+
+  // If stderr is not a TTY is untagged, tag as 1047
+  if (0 == __getfdccsid(fileno(stderr))) {
+    struct file_tag tag;
+    tag.ft_ccsid = 1047;
+    tag.ft_txtflag = 1;
+    ret += fcntl(fileno(stderr), F_SETTAG, &tag) != 0;
+
+    struct f_cnvrt req = {SETCVTON, 0, 1047};
+    ret =+ fcntl(fileno(stderr), F_CONTROL_CVT, &req) != 0;
+  }
+
+  // If stdin not a TTY is untagged, tag as 1047
+  if (0 == __getfdccsid(fileno(stdin))) {
+    struct file_tag tag;
+    tag.ft_ccsid = 1047;
+    tag.ft_txtflag = 1;
+    ret += fcntl(fileno(stdin), F_SETTAG, &tag) != 0;
+
+    struct f_cnvrt req = {SETCVTON, 0, 1047};
+    ret =+ fcntl(fileno(stdin), F_CONTROL_CVT, &req) != 0;
+  }
+
+  if (ret) {
+    fprintf(stderr, "WARNING: Could not tag stdio streams. Enhanced ASCII auto-conversion facilities may not function correctly.\n");
+  }
+}
+
+static int orig_mode;
+static int orig_cvstate;
+
+#include "EXTERN.h"
+#include "perl.h"
+
+__attribute__((constructor))
+static void
+__init()
+{
+    // With "_EDC_SIG_DFLT" set to '0', a process closing with SIGINT send output both to stderr and stdout. 
+    // Setting "_EDC_SIG_DFLT" default action of the following signals is abnormal termination of the process with no message output: SIGALRM, SIGHUP, SIGINT, SIGPIPE, SIGPOLL, SIGPROF, SIGSYS, SIGTERM, SIGUSR1, SIGUSR2, and SIGVTALRM
+    setenv("_EDC_SIG_DFLT", "1", 1);
+
+    // Setting _EDC_SUSV3 can be used to control the behavior of setenv() with respect to setting EINVAL when var_name is a null pointer, points to an empty string or points to a string containing an '=' character. By default, setenv() will not set EINVAL for these conditions. 
+    // When _EDC_SUSV3 is set to 1, setenv() will set errno to EINVAL if one of these conditions is true. 
+    setenv("_EDC_SUSV3", "1", 1);
+
+    // Force to ASCII mode and AUTOCVT to ON
+#if (__CHARSET_LIB == 1)
+    // Sets the _TAG_REDIR state to txt
+    setenv("_TAG_REDIR_ERR", "txt", 1);
+    setenv("_TAG_REDIR_IN", "txt", 1);
+    setenv("_TAG_REDIR_OUT", "txt", 1);
+    orig_mode = __ae_thread_swapmode(__AE_ASCII_MODE);
+#else
+    orig_mode = __ae_thread_swapmode(__AE_EBCDIC_MODE);
+#endif
+    orig_cvstate = __ae_autoconvert_state(_CVTSTATE_QUERY);
+    if (_CVTSTATE_OFF == orig_cvstate)
+        __ae_autoconvert_state(_CVTSTATE_ON);
+
+    // Sets the LIBPATH relative to the perl executable
+    char path[_XOPEN_PATH_MAX];
+    char parent[_XOPEN_PATH_MAX];
+
+    W_PSPROC buf;
+    int token = 0;
+    pid_t mypid = getpid();
+    memset(&buf, 0, sizeof(buf));
+    buf.ps_pathlen = _XOPEN_PATH_MAX;
+    buf.ps_pathptr = path;
+
+    while ((token = w_getpsent(token, &buf, sizeof(buf))) > 0) {
+      // Found our process.
+      if (buf.ps_pid != mypid)
+        continue;
+      
+
+      // Resolve path to find true location of executable.
+      if (realpath(buf.ps_pathptr, parent) == NULL)
+        break;
+
+      // Get parent directory, dirname modifies parent pointer
+      dirname(parent);
+
+      // Get parent's parent directory.
+      char* parent2 = strdup(parent);
+      if (!parent2)
+        break;
+
+      // Get parent of parent, dirname modifies parent2 pointer
+      dirname(parent2);
+
+      char* libpath_env = getenv("LIBPATH");
+
+      const char* install_lib = "/lib/perl5/" PERL_VERSION_STRING "/os390/CORE";
+      const char* install_lib2 = "/lib/" PERL_VERSION_STRING "/os390/CORE";
+
+      // Append new paths to libpath.
+      char buffer[4096] = {0};
+      sprintf(buffer, "%s", parent);
+      sprintf(buffer, "%s:%s%s", buffer, parent2, "/lib");
+      sprintf(buffer, "%s:%s%s", buffer, parent2, install_lib);
+      sprintf(buffer, "%s:%s%s", buffer, parent2, install_lib2);
+      if (libpath_env)
+        sprintf(buffer, "%s:%s", buffer, libpath_env);
+      else
+        sprintf(buffer, "%s", buffer);
+
+      setenv("LIBPATH", buffer, 1);
+  
+      free(parent2);
+
+      break;
+    }
+   
+#if (__CHARSET_LIB == 1)
+    // Tag stdio streams if not already tagged 
+    init_stdio_streams();
+#endif
+}
+
+__attribute__((destructor))
+static void
+__deinit()
+{
+    __ae_thread_swapmode(orig_mode);
+    __ae_autoconvert_state(orig_cvstate);
+}
diff --git a/Makefile.SH b/Makefile.SH
index e6cb0e0..2067db7 100755
--- a/Makefile.SH
+++ b/Makefile.SH
@@ -434,6 +434,7 @@ FIRSTMAKEFILE = $firstmakefile
 
 # Any special object files needed by this architecture, e.g. os2/os2.obj
 ARCHOBJS = $archobjs
+ARCH_MAIN_OBJS = $arch_main_objs
 
 .SUFFIXES: .c \$(OBJ_EXT) .i .s .c.depends
 
@@ -586,9 +587,9 @@ miniperl_dtrace_objs = $(miniperl_objs_nodt:%=mpdtrace/%)
 perllib_dtrace_objs = $(perllib_objs_nodt:%=libpdtrace/%)
 perlmain_dtrace_objs = maindtrace/perlmain$(OBJ_EXT)
 
-miniperl_objs = $(miniperl_dtrace_objs) $(DTRACE_MINI_O)
+miniperl_objs = $(miniperl_dtrace_objs) $(DTRACE_MINI_O) $(ARCH_MAIN_OBJS)
 perllib_objs  = $(perllib_dtrace_objs) $(DTRACE_PERLLIB_O)
-perlmain_objs = $(perlmain_dtrace_objs) $(DTRACE_MAIN_O)
+perlmain_objs = $(perlmain_dtrace_objs) $(DTRACE_MAIN_O) $(ARCH_MAIN_OBJS)
 
 miniperl_dep = $(DTRACE_MINI_O)
 perllib_dep = $(DTRACE_PERLLIB_O)
@@ -599,9 +600,9 @@ perlmain_dep = $(DTRACE_MAIN_O)
 *)
     $spitshell >>$Makefile <<'!NO!SUBS!'
 
-miniperl_objs = $(miniperl_objs_nodt) $(DTRACE_MINI_O)
+miniperl_objs = $(miniperl_objs_nodt) $(DTRACE_MINI_O) $(ARCH_MAIN_OBJS)
 perllib_objs  = $(perllib_objs_nodt) $(DTRACE_PERLLIB_O)
-perlmain_objs = perlmain$(OBJ_EXT) $(DTRACE_MAIN_O)
+perlmain_objs = perlmain$(OBJ_EXT) $(DTRACE_MAIN_O) $(ARCH_MAIN_OBJS)
 
 miniperl_dep = $(miniperl_objs)
 perllib_dep = $(perllib_objs)
diff --git a/.gitignore b/.gitignore
index 309de23..1d0c3d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -56,6 +56,7 @@ perldtrace.h
 
 # general build products
 *.o
+*.d
 *.a
 *.so
 *.i
diff --git a/doio.c b/doio.c
index 4009545..3d5dc99 100644
--- a/doio.c
+++ b/doio.c
@@ -218,57 +218,6 @@ Perl_PerlLIO_dup2_cloexec(pTHX_ int oldfd, int newfd)
 #endif
 }
 
-#if defined(OEMVS)
-  #if (__CHARSET_LIB == 1)
-#   include <stdio.h>
-#   include <stdlib.h>
-
-    static int setccsid(int fd, int ccsid) 
-    {
-      attrib_t attr;
-      int rc;
-
-      memset(&attr, 0, sizeof(attr));
-      attr.att_filetagchg = 1;
-      attr.att_filetag.ft_ccsid = ccsid;
-      attr.att_filetag.ft_txtflag = 1;
-
-      rc = __fchattr(fd, &attr, sizeof(attr));
-      return rc;
-    }
-
-    static void updateccsid(int fd, const char* path, int oflag, int perm) 
-    { 
-      int rc;
-      if (oflag & O_CREAT) {
-        rc = setccsid(fd, 819);
-      }
-    }
-
-    int asciiopen(const char* path, int oflag) 
-    {
-      int rc;
-      int fd = open(path, oflag);
-      if (fd == -1) { 
-        return fd;
-      }
-      updateccsid(fd, path, oflag, -1);
-      return fd; 
-    }
-
-    int asciiopen3(const char* path, int oflag, int perm) 
-    {
-      int rc;
-      int fd = open(path, oflag, perm);
-      if (fd == -1) { 
-        return fd;
-      }
-      updateccsid(fd, path, oflag, perm);
-      return fd;
-    } 
-  #endif
-#endif
-
 int
 Perl_PerlLIO_open_cloexec(pTHX_ const char *file, int flag)
 {
@@ -318,7 +267,7 @@ Perl_my_mkstemp_cloexec(char *templte)
 {
     int tempfd = Internal_Perl_my_mkstemp_cloexec(templte);
 #  if defined(TEMP_CCSID)
-    setccsid(tempfd, TEMP_CCSID);
+    __setccsid(tempfd, TEMP_CCSID);
 #  endif
     return tempfd;
 }
@@ -2514,6 +2463,11 @@ Perl_do_exec3(pTHX_ const char *incmd, int fd, int do_report)
             }
           doshell:
             PERL_FPU_PRE_EXEC
+#if defined(OEMVS)
+  #if (__CHARSET_LIB == 1)
+            unsetenv("_TAG_REDIR_ERR");
+  #endif
+#endif
             PerlProc_execl(PL_sh_path, "sh", "-c", cmd, (char *)NULL);
             PERL_FPU_POST_EXEC
             S_exec_failed(aTHX_ PL_sh_path, fd, do_report);
diff --git a/ext/ExtUtils-Miniperl/lib/ExtUtils/Miniperl.pm b/ext/ExtUtils-Miniperl/lib/ExtUtils/Miniperl.pm
index e90b4ae..091c6e3 100644
--- a/ext/ExtUtils-Miniperl/lib/ExtUtils/Miniperl.pm
+++ b/ext/ExtUtils-Miniperl/lib/ExtUtils/Miniperl.pm
@@ -68,6 +68,7 @@ sub writemain{
  */
 
 #ifdef OEMVS
+#ifndef __LP64__
 #ifdef MYMALLOC
 /* sbrk is limited to first heap segment so make it big */
 #pragma runopts(HEAP(8M,500K,ANYWHERE,KEEP,8K,4K) STACK(,,ANY,) ALL31(ON))
@@ -75,6 +76,7 @@ sub writemain{
 #pragma runopts(HEAP(2M,500K,ANYWHERE,KEEP,8K,4K) STACK(,,ANY,) ALL31(ON))
 #endif
 #endif
+#endif
 
 #define PERL_IN_MINIPERLMAIN_C
 
@@ -95,6 +97,9 @@ int
 main(int argc, char **argv, char **env)
 #endif
 {
+#if defined(OEMVS) && !defined(__clang__)
+    __init();
+#endif
     int exitstatus, i;
 #ifndef NO_ENV_ARRAY_IN_MAIN
     PERL_UNUSED_ARG(env);
diff --git a/iperlsys.h b/iperlsys.h
index b922af0..daed107 100644
--- a/iperlsys.h
+++ b/iperlsys.h
@@ -777,21 +777,8 @@ struct IPerlLIOInfo
 #    define PerlLIO_lstat(name, buf)    PerlLIO_stat((name), (buf))
 #  endif
 #  define PerlLIO_mktemp(file)          mktemp((file))
-#  if defined(OEMVS)
-#    if (__CHARSET_LIB == 1)
-    int asciiopen(const char* path, int oflag);
-    int asciiopen3(const char* path, int oflag, int perm);
-
-#      define PerlLIO_open(file, flag)          asciiopen((file), (flag))
-#      define PerlLIO_open3(file, flag, perm)   asciiopen3((file), (flag), (perm))
-#    else
-#      define PerlLIO_open(file, flag)          open((file), (flag))
-#      define PerlLIO_open3(file, flag, perm)   open((file), (flag), (perm))
-#    endif
-#  else
-#    define PerlLIO_open(file, flag)            open((file), (flag))
-#    define PerlLIO_open3(file, flag, perm)     open((file), (flag), (perm))
-#  endif
+#  define PerlLIO_open(file, flag)            open((file), (flag))
+#  define PerlLIO_open3(file, flag, perm)     open((file), (flag), (perm))
 #  define PerlLIO_read(fd, buf, count)  read((fd), (buf), (count))
 #  define PerlLIO_rename(old, new)      rename((old), (new))
 #  define PerlLIO_setmode(fd, mode)     setmode((fd), (mode))
diff --git a/util.c b/util.c
index ca7d374..a902360 100644
--- a/util.c
+++ b/util.c
@@ -2646,22 +2646,6 @@ Perl_unlnk(pTHX_ const char *f)	/* unlink all versions of a file */
 }
 #endif
 
-#if defined(OEMVS)
-  #if (__CHARSET_LIB == 1)
-  static int chgfdccsid(int fd, unsigned short ccsid) 
-  {
-    attrib_t attr;
-    memset(&attr, 0, sizeof(attr));
-    attr.att_filetagchg = 1;
-    attr.att_filetag.ft_ccsid = ccsid;
-    if (ccsid != FT_BINARY) {
-      attr.att_filetag.ft_txtflag = 1;
-    }
-    return __fchattr(fd, &attr, sizeof(attr));
-  }
-  #endif
-#endif
-
 /*
 =for apidoc my_popen_list
 
@@ -2717,12 +2701,6 @@ Perl_my_popen_list(pTHX_ const char *mode, int n, SV **args)
         /* Close parent's end of error status pipe (if any) */
         if (did_pipes)
             PerlLIO_close(pp[0]);
-#if defined(OEMVS)
-  #if (__CHARSET_LIB == 1)
-        chgfdccsid(p[THIS], 819);
-        chgfdccsid(p[THAT], 819);
-  #endif
-#endif
         /* Now dup our end of _the_ pipe to right position */
         if (p[THIS] != (*mode == 'r')) {
             PerlLIO_dup2(p[THIS], *mode == 'r');
@@ -2798,19 +2776,7 @@ Perl_my_popen_list(pTHX_ const char *mode, int n, SV **args)
     }
     if (did_pipes)
          PerlLIO_close(pp[0]);
-#if defined(OEMVS)
-  #if (__CHARSET_LIB == 1)
-    PerlIO* io = PerlIO_fdopen(p[This], mode);
-    if (io) {
-      chgfdccsid(p[This], 819);
-    }
-    return io;
-  #else
-    return PerlIO_fdopen(p[This], mode);
-  #endif
-#else
     return PerlIO_fdopen(p[This], mode);
-#endif
 
 #else
 #  if defined(OS2)	/* Same, without fork()ing and all extra overhead... */
@@ -2889,12 +2855,6 @@ Perl_my_popen(pTHX_ const char *cmd, const char *mode)
 #define THAT This
         if (did_pipes)
             PerlLIO_close(pp[0]);
-#if defined(OEMVS)
-  #if (__CHARSET_LIB == 1)
-        chgfdccsid(p[THIS], 819);
-        chgfdccsid(p[THAT], 819);
-  #endif
-#endif
         if (p[THIS] != (*mode == 'r')) {
             PerlLIO_dup2(p[THIS], *mode == 'r');
             PerlLIO_close(p[THIS]);
@@ -2985,7 +2945,7 @@ Perl_my_popen(pTHX_ const char *cmd, const char *mode)
   #if (__CHARSET_LIB == 1)
     PerlIO* io = PerlIO_fdopen(p[This],	mode);
     if (io) {
-      chgfdccsid(p[This], 819);
+      __chgfdccsid(p[This], 819);
     }
     return io;
   #else
diff --git a/Configure b/Configure
index bd96249..53e8787 100755
--- a/Configure
+++ b/Configure
@@ -4566,7 +4566,7 @@ echo "Checking for GNU cc in disguise and/or its version number..." >&4
 $cat >try.c <<EOM
 #include <stdio.h>
 int main() {
-#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
+#if defined(__GNUC__) && !defined(__INTEL_COMPILER) && !defined(__MVS__) /* xlclang sets __GNUC__ but does not set __VERSION__ */
 #ifdef __VERSION__
 	printf("%s\n", __VERSION__);
 #else
@@ -8726,10 +8726,14 @@ case "$useshrplib" in
 true)
 	case "$userelocatableinc" in
 	true|define)
-		echo "Cannot build with both -Duserelocatableinc and -Duseshrplib" >&4
-		echo "See INSTALL for an explanation why that won't work." >&4
-		exit 4
-		;;
+    case "$osname" in
+      os390) echo "Perl on z/OS uses LIBPATH to dynamically locate shared objects." ;;
+      *)
+        echo "Cannot build with both -Duserelocatableinc and -Duseshrplib" >&4
+        echo "See INSTALL for an explanation why that won't work." >&4
+        exit 4
+        ;;
+    esac
 	esac
 	case "$libperl" in
 	'')
